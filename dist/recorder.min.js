"use strict";var getUserMedia=require("get-user-media-promise"),AudioContext=global.AudioContext||global.webkitAudioContext,Recorder=function(e){var t=this;if(!Recorder.isRecordingSupported())throw new Error("Recording is not supported in this browser");this.state="inactive",this.eventTarget=global.document.createDocumentFragment(),this.monitorNode=this.audioContext.createGain(),this.config=Object.assign({bufferLength:4096,encoderApplication:2049,encoderFrameSize:20,encoderPath:"encoderWorker.min.js",encoderSampleRate:48e3,leaveStreamOpen:!1,maxBuffersPerPage:40,monitorGain:0,numberOfChannels:1,originalSampleRate:this.audioContext.sampleRate,resampleQuality:3,mediaTrackConstraints:!0,streamPages:!1,wavBitDepth:16,wavSampleRate:this.audioContext.sampleRate},e),this.initWorker(),this.setMonitorGain(this.config.monitorGain),this.scriptProcessorNode=this.audioContext.createScriptProcessor(this.config.bufferLength,this.config.numberOfChannels,this.config.numberOfChannels),this.scriptProcessorNode.onaudioprocess=function(e){t.encodeBuffers(e.inputBuffer)}};Recorder.prototype.audioContext=new AudioContext,Recorder.isRecordingSupported=function(){return(global.AudioContext||global.webkitAudioContext)&&getUserMedia.isSupported},Recorder.prototype.addEventListener=function(e,t,o){this.eventTarget.addEventListener(e,t,o)},Recorder.prototype.clearStream=function(){this.stream&&(this.stream.getTracks?this.stream.getTracks().forEach(function(e){e.stop()}):this.stream.stop(),delete this.stream)},Recorder.prototype.encodeBuffers=function(e){if("recording"===this.state){for(var t=[],o=0;o<e.numberOfChannels;o++)t[o]=e.getChannelData(o);this.encoder.postMessage({command:"encode",buffers:t})}},Recorder.prototype.initStream=function(){var e=this,t={audio:this.config.mediaTrackConstraints};return this.stream?(this.eventTarget.dispatchEvent(new global.Event("streamReady")),global.Promise.resolve(this.stream)):getUserMedia(t).then(function(t){return e.stream=t,e.sourceNode=e.audioContext.createMediaStreamSource(t),e.sourceNode.connect(e.scriptProcessorNode),e.sourceNode.connect(e.monitorNode),e.eventTarget.dispatchEvent(new global.Event("streamReady")),t},function(t){throw e.eventTarget.dispatchEvent(new global.ErrorEvent("streamError",{error:t})),t})},Recorder.prototype.initWorker=function(){var e=this;this.encoder=new global.Worker(this.config.encoderPath),this.config.streamPages?this.encoder.addEventListener("message",function(t){e.streamPage(t.data)}):(this.recordedPages=[],this.totalLength=0,this.encoder.addEventListener("message",function(t){e.storePage(t.data)}))},Recorder.prototype.pause=function(){"recording"===this.state&&(this.state="paused",this.eventTarget.dispatchEvent(new global.Event("pause")))},Recorder.prototype.removeEventListener=function(e,t,o){this.eventTarget.removeEventListener(e,t,o)},Recorder.prototype.resume=function(){"paused"===this.state&&(this.state="recording",this.eventTarget.dispatchEvent(new global.Event("resume")))},Recorder.prototype.setMonitorGain=function(e){this.monitorNode.gain.setTargetAtTime(e,this.audioContext.currentTime,.01)},Recorder.prototype.start=function(){"inactive"===this.state&&this.stream&&(this.encoder.postMessage(Object.assign({command:"init"},this.config)),this.encodeBuffers=function(){delete this.encodeBuffers},this.state="recording",this.monitorNode.connect(this.audioContext.destination),this.scriptProcessorNode.connect(this.audioContext.destination),this.eventTarget.dispatchEvent(new global.Event("start")))},Recorder.prototype.stop=function(){"inactive"!==this.state&&(this.state="inactive",this.monitorNode.disconnect(),this.scriptProcessorNode.disconnect(),this.config.leaveStreamOpen||this.clearStream(),this.encoder.postMessage({command:"done"}))},Recorder.prototype.storePage=function(e){if(null===e){for(var t=new Uint8Array(this.totalLength),o=0,r=0;r<this.recordedPages.length;r++)t.set(this.recordedPages[r],o),o+=this.recordedPages[r].length;this.eventTarget.dispatchEvent(new global.CustomEvent("dataAvailable",{detail:t})),this.initWorker(),this.eventTarget.dispatchEvent(new global.Event("stop"))}else this.recordedPages.push(e),this.totalLength+=e.length},Recorder.prototype.streamPage=function(e){null===e?(this.initWorker(),this.eventTarget.dispatchEvent(new global.Event("stop"))):this.eventTarget.dispatchEvent(new global.CustomEvent("dataAvailable",{detail:e}))},module.exports=Recorder;
