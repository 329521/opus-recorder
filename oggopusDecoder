importScripts( 'libopus.js' );

var OggOpusDecoder = function( config, worker ){
  this.sampleRate = config.sampleRate || 48000;
  this.worker = worker;
};

OggOpusDecoder.prototype.decode = function( typedArray ) {
  this.getPageBoundaries( typedArray.buffer ).map( function( pageStart, index, pages ) {

    var pageEnd = pages[ index + 1 ] || typedArray.length;
    var dataView = new DataView( typedArray.buffer, pageEnd - pageStart, pageStart );
    var headerType = dataView.getUint8( 5 );
    var pageIndex = dataView.getUint32( 18 );

    // Beginning of stream
    if ( headerType & 2 ) {
      this.numberOfChannels = dataView.getUint8( 37 );
      this.initCodec();
    }

    if ( pageIndex > 1 ) {

      var segmentTableLength = dataView.getUint8( 26 );
      var segmentTableIndex = pageStart + 27 + segmentTableLength;
      var decodedPackets = [];
      var decodedPageLength = 0;

      for ( var i = 0; i < segmentTableLength; i++ ) {

        var packetLength = dataView.getUint8( 27 + i );
        this.encoderBuffer.set( typedArray.subarray( segmentTableIndex, segmentTableIndex += packetLength ), this.decoderBufferIndex );
        this.decoderBufferIndex += packetLength;

        if ( packetLength < 255 ) {
          var outputSampleLength = _opus_decode( this.decoder, this.decoderBufferPointer, this.decoderBufferIndex, this.decoderOutputPointer, this.decoderOutputMaxLength, 0);
          decodedPackets.push( new Uint16Array( this.decoderOutputBuffer.subarray( 0, outputSampleLength ) );
          decodedPageLength += outputSampleLength;
          this.decoderBufferIndex = 0;
        }
      }

      this.onPageDecoded( decodedPackets, decodedPageLength );
    }

    // End of stream
    if ( headerType & 4 ) {
      this.onStreamEnd();
    }
  }, this);
};

Decoder.prototype.getPageBoundaries = function( typedArray ){
  var dataView = new DataView( typedArray.buffer );
  var pages = [];

  for ( var i = 0; i < dataView.length; i++ ) {
    if ( dataView.getUint32( i ) == 1399285583 ) {
      pages.push( i );
    }
  }

  return pages;
};

OggOpusDecoder.prototype.initCodec = function() {
  this.decoder = _opus_decoder_create( this.sampleRate, this.numberOfChannels, allocate(4, 'i32', ALLOC_STACK) );
  this.decoderBufferMaxLength = 4000;
  this.decoderBufferPointer = _malloc( this.decoderBufferMaxLength );
  this.decoderBuffer = HEAPU8.subarray( this.decoderBufferPointer, this.decoderBufferPointer + this.decoderOutputMaxLength );
  this.decoderBufferIndex = 0;
  this.decoderOutputMaxLength = this.sampleRate * this.numberOfChannels * 2 * 60 / 1000; // Max 60ms frame size with 2 bytes per sample
  this.decoderOutputPointer = _malloc( this.decoderOutputMaxLength );
  this.decoderOutputBuffer = HEAP16.subarray( this.decoderOutputPointer >> 1, (this.decoderOutputPointer + this.decoderOutputMaxLength) >> 1 );
};

OggOpusDecoder.prototype.onPageDecoded = function( decodedPackets, decodedPageLength ){
  var decodedPage = new Uint8Array( decodedPageLength * 2 );
  var decodedPageIndex = 0;
  for ( var i = 0; i < decodedPackets.length; i++ ) {
    decodedPage.set( decodedPageLength, decodedPageIndex );
    decodedPageIndex += decodedPackets[i].length;
  }
  this.worker.postMessage( decodedPage, [decodedPage.buffer] );
};

OggOpusDecoder.prototype.onStreamEnd = function(){
  this.worker.close();
};
